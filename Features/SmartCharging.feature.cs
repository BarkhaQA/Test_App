// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowProject.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SmartChargingFeature : object, Xunit.IClassFixture<SmartChargingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SmartCharging.feature"
#line hidden
        
        public SmartChargingFeature(SmartChargingFeature.FixtureData fixtureData, SpecFlowProject_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "SmartCharging", @"Read more about Gherkin language: https://docs.specflow.org/projects/specflow/en/latest/Gherkin/Gherkin-Reference.html
Read more how to create C# code from scenario steps: https://docs.specflow.org/projects/specflow/en/latest/visualstudio/Generating-Skeleton-Code.html", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Change capacity of a group")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Change capacity of a group")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public void ChangeCapacityOfAGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change capacity of a group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("a group of charge stations with capacity 100 A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When("capacity of the group changed to 50 A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then("the group has capacity 50 A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a Group")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Create a Group")]
        [Xunit.TraitAttribute("Category", "SmokeTest")]
        public void CreateAGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "SmokeTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 14
testRunner.Given("a details of Group with the name of Group A with Capacity of 150 A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 15
testRunner.When("group is inserted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
testRunner.Then("the group with the name Group A and capacity 150A should get created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a Charge Station")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Create a Charge Station")]
        [Xunit.TraitAttribute("Category", "SmokeTest")]
        public void CreateAChargeStation()
        {
            string[] tagsOfScenario = new string[] {
                    "SmokeTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Charge Station", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
 testRunner.Given("a details of Charge Station with the already existing group Group A and Charge St" +
                        "ation name as ChargeStation A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
 testRunner.When("Charge Station with name ChargeStation A does not exist in group Group A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("the charge station with the name ChargeStation A should get created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a Connector")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Create a Connector")]
        [Xunit.TraitAttribute("Category", "SmokeTest")]
        public void CreateAConnector()
        {
            string[] tagsOfScenario = new string[] {
                    "SmokeTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Connector", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
 testRunner.Given("a details of Connector with the already existing Charge Station ChargeStation A w" +
                        "ith Connector name as Connector A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
 testRunner.When("Charge Station with name ChargeStation A is already exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then("the connector with the name Connector A should get created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a Charge Station without a Group")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Create a Charge Station without a Group")]
        [Xunit.TraitAttribute("Category", "NegativeTest")]
        public void CreateAChargeStationWithoutAGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Charge Station without a Group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
 testRunner.Given("a details of Charge Station with the group nane Group S which is not in the syste" +
                        "m and Charge Station name as ChargeStation C", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
 testRunner.When("Charge Station with name ChargeStation C does not exist and Group S does not avai" +
                        "lable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then("the charge station with the name \"ChargeStation C should not get created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create multiple Charge Station in a Group")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Create multiple Charge Station in a Group")]
        [Xunit.TraitAttribute("Category", "NegativeTest")]
        public void CreateMultipleChargeStationInAGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create multiple Charge Station in a Group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
 testRunner.Given("a details of Charge Station with the already existing group Group A and Charge St" +
                        "ation name as ChargeStation D", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
 testRunner.And("other Charge Station name ChargeStation E", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.When("Charge Station with name ChargeStation D does not exist in group Group A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.And("Charge Station with name ChargeStation E does not exist in group Group A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.Then("the charge station with the names ChargeStation D and ChargeStation E should not " +
                        "get created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a already Existing Charge station on other group")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Create a already Existing Charge station on other group")]
        [Xunit.TraitAttribute("Category", "NegativeTest")]
        public void CreateAAlreadyExistingChargeStationOnOtherGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a already Existing Charge station on other group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 46
 testRunner.Given("a details of Charge Station with the already existing group Group B and Charge St" +
                        "ation name as ChargeStation A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
 testRunner.When("Charge Station with name ChargeStation A does not exist in  Group B but exists in" +
                        " Group A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
 testRunner.Then("the charge station with the name ChargeStation A should not get created since it " +
                        "is already exists in Group A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a Connector without a Charge Station")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Create a Connector without a Charge Station")]
        [Xunit.TraitAttribute("Category", "NegativeTest")]
        public void CreateAConnectorWithoutAChargeStation()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Connector without a Charge Station", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 53
 testRunner.Given("a details of Connector with the Charge station name  ChargeStation S which is not" +
                        " in the system and Connector name as \"Connector C\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
 testRunner.When("Connector with name Connector C does not exist and ChargeStation S does not avail" +
                        "able", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.Then("the connector with the name Connector C should not get created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a Connector #6 in a Charge station having already 5 connectors in it")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Create a Connector #6 in a Charge station having already 5 connectors in it")]
        [Xunit.TraitAttribute("Category", "NegativeTest")]
        public void CreateAConnector6InAChargeStationHavingAlready5ConnectorsInIt()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Connector #6 in a Charge station having already 5 connectors in it", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 59
 testRunner.Given("a details of Connector with the Charge station name ChargeStation A which has 5 c" +
                        "onnectors in the system and a Connector name as \"Connector F\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
 testRunner.When("Connector with name Connector F does not exist in ChargeStation A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.Then("the connector with the name Connector F should not get created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update Group by Changing the Name of the Group")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Update Group by Changing the Name of the Group")]
        public void UpdateGroupByChangingTheNameOfTheGroup()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Group by Changing the Name of the Group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 65
 testRunner.Given("a group of charge stations with name Group C", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
 testRunner.When("name of the group changed to Group D", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.Then("the group has Available as Group D with all existing details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update Connector by changing the AMPs into negative value")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Update Connector by changing the AMPs into negative value")]
        [Xunit.TraitAttribute("Category", "NegativeTest")]
        public void UpdateConnectorByChangingTheAMPsIntoNegativeValue()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Connector by changing the AMPs into negative value", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 71
 testRunner.Given("a connector in charge stations with capacity 100 A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 72
 testRunner.When("capacity of the connector changed to -50 A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
 testRunner.Then("the connector has capacity 100 A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update Charge Station by change its Name")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Update Charge Station by change its Name")]
        public void UpdateChargeStationByChangeItsName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Charge Station by change its Name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 76
 testRunner.Given("a charge stations with name ChargeStation C in Group A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
 testRunner.When("name of the charge station changed to ChargeStation D", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.Then("the Charge station will Available as ChargeStation D with all existing details of" +
                        " connectors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update Connector by changing the name")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Update Connector by changing the name")]
        public void UpdateConnectorByChangingTheName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Connector by changing the name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 81
 testRunner.Given("a connectors with name connector C in ChargeStation C", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 82
 testRunner.When("name of the connector changed to Connector D", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
 testRunner.Then("the Connector will Available as connector D with the same capacity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update Group by changing capacity")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Update Group by changing capacity")]
        [Xunit.TraitAttribute("Category", "NegativeTest")]
        [Xunit.TraitAttribute("Category", "PositiveScenario")]
        [Xunit.InlineDataAttribute("Group 1", "5A", "7A", "7A", new string[0])]
        [Xunit.InlineDataAttribute("Group 2", "10A", "-15A", "10A", new string[0])]
        public void UpdateGroupByChangingCapacity(string groupName, string capacity, string modifyCapacity, string updatedCapacity, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NegativeTest",
                    "PositiveScenario"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("GroupName", groupName);
            argumentsOfScenario.Add("Capacity", capacity);
            argumentsOfScenario.Add("ModifyCapacity", modifyCapacity);
            argumentsOfScenario.Add("UpdatedCapacity", updatedCapacity);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Group by changing capacity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 87
  testRunner.Given(string.Format("there are {0} with {1}", groupName, capacity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
  testRunner.When(string.Format("I update the {0}", modifyCapacity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
  testRunner.Then(string.Format("I capacity should be updated with {0}", updatedCapacity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Remove Group")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Remove Group")]
        public void RemoveGroup()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove Group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 99
 testRunner.Given("a group of charge station with the name Group A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 100
 testRunner.When("user delete the Group A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
 testRunner.Then("the Group A and all related Charge Stations of the group should get deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Removing a Charge station from the group")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Removing a Charge station from the group")]
        public void RemovingAChargeStationFromTheGroup()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing a Charge station from the group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 103
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 104
 testRunner.Given("a Charge Station with the already existing group Group A and Charge Station name " +
                        "as ChargeStation A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 105
 testRunner.When("User delete the Charge Station with name ChargeStation A from the  Group A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
 testRunner.Then("the charge station with the names ChargeStation A should  get deleted on this req" +
                        "uest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Removing Multiple Charge station from a Group")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Removing Multiple Charge station from a Group")]
        [Xunit.TraitAttribute("Category", "NegativeTest")]
        public void RemovingMultipleChargeStationFromAGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing Multiple Charge station from a Group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 109
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 110
 testRunner.Given("a Charge Station with the already existing group Group A and Charge Station name " +
                        "as ChargeStation D", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 111
 testRunner.And("other Charge Station name ChargeStation E", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
 testRunner.When("user delete the Charge Station with name ChargeStation D from the  Group A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 113
 testRunner.And("Charge Station with name ChargeStation E from the Group A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
 testRunner.Then("the charge station with the names ChargeStation D and ChargeStation E should not " +
                        "get deleted on this request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Remove Connectors")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Remove Connectors")]
        public void RemoveConnectors()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove Connectors", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 116
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 117
 testRunner.Given("a connector A with the already existing ChargeStation A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 118
 testRunner.When("User delete the Connector A from the ChargeStation A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 119
 testRunner.Then("the connector A should deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Checking the Capacity of Group with Charge Station")]
        [Xunit.TraitAttribute("FeatureTitle", "SmartCharging")]
        [Xunit.TraitAttribute("Description", "Checking the Capacity of Group with Charge Station")]
        public void CheckingTheCapacityOfGroupWithChargeStation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checking the Capacity of Group with Charge Station", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 122
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 123
 testRunner.Given("a group of charge stations with capacity 100 A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 124
 testRunner.And("a connectors of charge stations with the capacity of 10A, 30A, 40A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
 testRunner.When("doing a total of capacity of all connectors of the group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 126
 testRunner.Then("the total connectors capacity should be of less than or equal to 100 A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SmartChargingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SmartChargingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
